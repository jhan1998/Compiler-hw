/* Definition*/
%{
    #include <stdio.h>
    #include <stdlib.h>
    #include <string.h>

    #define YY_NO_UNPUT
    #define YY_NO_INPUT
    enum {none, state1, state2};
    int line_num = 0;
    int comment_num = 0;
    int state = none;
%}

/* Define regular expression label */
letter [a-zA-Z_]
digit [0-9]
id {letter}+({letter}|{digit})*
inumber {digit}+
fnumber ({digit}*\.{digit}+)
Str_lit  \".+\"
comment_cpp  "//".*
comment_start  "/*"
comment_end  "*/"
comment_text  (("/"*|"*"*)([^*^/^\n]|\^))*
/* Rules section */
%%

"+"         { printf("%-8s \t %s\n", yytext, "ADD"); }
"-"         { printf("%-8s \t %s\n", yytext, "SUB"); }
"*"         { printf("%-8s \t %s\n", yytext, "MUL"); }
"/"         { printf("%-8s \t %s\n", yytext, "QUO"); }
"%"         { printf("%-8s \t %s\n", yytext, "REM"); }
"++"         { printf("%-8s \t %s\n", yytext, "INC"); }
"--"         { printf("%-8s \t %s\n", yytext, "DEC"); }
">"         { printf("%-8s \t %s\n", yytext, "GTR"); }
"<"         { printf("%-8s \t %s\n", yytext, "LSS"); }
">="         { printf("%-8s \t %s\n", yytext, "GEQ"); }
"<="         { printf("%-8s \t %s\n", yytext, "LEQ"); }
"=="         { printf("%-8s \t %s\n", yytext, "EQL"); }
"!="         { printf("%-8s \t %s\n", yytext, "NEQ"); }
"="         { printf("%-8s \t %s\n", yytext, "ASSIGN"); }
"+="         { printf("%-8s \t %s\n", yytext, "ADD_ASSIGN"); }
"-="         { printf("%-8s \t %s\n", yytext, "SUB_ASSIGN"); }
"*="         { printf("%-8s \t %s\n", yytext, "MUL_ASSIGN"); }
"/="         { printf("%-8s \t %s\n", yytext, "QUO_ASSIGN"); }
"%="         { printf("%-8s \t %s\n", yytext, "REM_ASSIGN"); }
"&&"         { printf("%-8s \t %s\n", yytext, "LAND"); }
"||"         { printf("%-8s \t %s\n", yytext, "LOR"); }
"!"         { printf("%-8s \t %s\n", yytext, "NOT"); }
"("         { printf("%-8s \t %s\n", yytext, "LPAREN"); }
")"         { printf("%-8s \t %s\n", yytext, "RPAREN"); }
"["         { printf("%-8s \t %s\n", yytext, "LBRACK"); }
"]"         { printf("%-8s \t %s\n", yytext, "RBRACK"); }
"{"         { printf("%-8s \t %s\n", yytext, "LBRACE"); }
"}"         { printf("%-8s \t %s\n", yytext, "RBRACE"); }
";"         { printf("%-8s \t %s\n", yytext, "SEMICOLON"); }
","         { printf("%-8s \t %s\n", yytext, "COMMA"); }
"\n"         {
    if(state == state1){
        printf("%-8s \t %s\n", yytext, "C Comment");
        comment_num++;
    }
    else{
        printf("%-8s \t %s\n", "", "NEWLINE");
        if(state == state2){
            state = none;
            comment_num++;
        }
    }
    line_num++;
}
{comment_cpp}       {
    printf("%-8s \t %s\n", yytext, "C++ Comment");
    state = state2;
}
{comment_start}       {
    printf("%s", yytext);
    state = state1;
}
{comment_end}       {
    printf("%-8s \t %s\n", yytext, "C Comment");
    state = state2;
}
{comment_text}       {
    if(state != state1) REJECT;
    printf("%s", yytext);
}
"print"         { printf("%-8s \t %s\n", yytext, "PRINT"); }
"println"         { printf("%-8s \t %s\n", yytext, "PRINTLN"); }
"if"         { printf("%-8s \t %s\n", yytext, "IF"); }
"else"         { printf("%-8s \t %s\n", yytext, "ELSE"); }
"for"         { printf("%-8s \t %s\n", yytext, "FOR"); }
"int32"         { printf("%-8s \t %s\n", yytext, "INT"); }
"float32"         { printf("%-8s \t %s\n", yytext, "FLOAT"); }
"bool"         { printf("%-8s \t %s\n", yytext, "BOOL"); }
"true"         { printf("%-8s \t %s\n", yytext, "TRUE"); }
"false"         { printf("%-8s \t %s\n", yytext, "FALSE"); }
"var"         { printf("%-8s \t %s\n", yytext, "VAR"); }
"string"         { printf("%-8s \t %s\n", yytext, "STRING"); }
{inumber}        { printf("%-8s \t %s\n", yytext, "INT_LIT"); }
{fnumber}        { printf("%-8s \t %s\n", yytext, "FLOAT_LIT"); }
{Str_lit}        {
    yytext[strlen(yytext)-1] ='\0';
    printf("%-8s \t %s\n", "\"", "QUOTA");
    printf("%-8s \t %s\n", yytext+1, "STRING");
    printf("%-8s \t %s\n", "\"", "QUOTA");
}
{id}        { printf("%-8s \t %s\n", yytext, "IDENT"); }
<<EOF>>     { 
    comment_num += (state == state2);
    line_num++; 
    yyterminate();
}
.           {;}

%%

/*  C Code section */
int yywrap(void)
{
    return 1;
}

int main(int argc, char *argv[])
{
    if (argc == 2) {
        yyin = fopen(argv[1], "r");
    } else {
        yyin = stdin;
    }
    yylex();
    printf("\nFinish scanning,\n");
    printf("total line: %d\n", line_num);
    printf("comment line: %d\n", comment_num);
    fclose(yyin);
    return 0;
}
